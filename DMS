#include <iostream>
#include <vector>
#include <string>
#include <direct.h> 
#include <io.h> 

using namespace std;

void list_file();
void directory();
void change_dir();

void directory() {
    char currentDir[FILENAME_MAX];
    
    if (_getcwd(currentDir, sizeof(currentDir))) {
        cout << "Current Directory: " << currentDir << "\n";
    } else {
        cout << "Unable to retrieve the current directory.\n";
        return;
    }

    string name;
    cout << "Enter the Directory name: ";
    cin >> name;
    
    if (_mkdir(name.c_str()) == 0) {
        cout << "Directory '" << name << "' created successfully.\n";
        cout << "Directory location: " << currentDir << "\\" << name << "\n";
    } else {
        cout << "Failed to create directory.\n";
    }
    
    cout << "Press any key to continue...";
    cin.get();
}

void list_file(){
	char x[FILENAME_MAX];
	if (_getcwd(x, sizeof(x))){
		cout << "Current Directory: "<< x <<"\n";
	} else {
		cout <<" Unable to retrieve the current directory \n";
	}
    int files;
    cout <<"        LIST FILE DETAIL \n";
    cout <<"---------------------------------\n";
    cout <<"1. List All Files\n";
    cout <<"2. List of Extension Files\n";
    cout <<"3. List of Name Wise\n";
    cout <<" Enter the Number: ";
    cin >> files;
    cin.ignore();

    switch (files) {
        case 1: {
            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst("*.*", &fileinfo);

            if (handle == -1) {
                cout << "No files found in the current directory.\n";
            } else {
                cout << "List of All(*.*) Files:\n";
                do {
                    if (!(fileinfo.attrib & _A_SUBDIR)) {
                        cout << fileinfo.name << "\n";
                    }
                } while (_findnext(handle, &fileinfo) == 0);
                _findclose(handle);
            }
            break;
        }
        case 2: {
            string extension;
            cout << "Enter the file extension (e.g., .txt): ";
            cin >> extension;
            cin.ignore();

            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst(("*" + extension).c_str(), &fileinfo);

            if (handle == -1) {
                cout << "No files found with extension " << extension << ".\n";
            } else {
                cout << "Files with extension " << extension << ":\n";
                do {
                    if (!(fileinfo.attrib & _A_SUBDIR)) {
                        cout << fileinfo.name << "\n";
                    }
                } while (_findnext(handle, &fileinfo) == 0);
                _findclose(handle);
            }
            break;
        }
        case 3: {
            string pattern;
            cout << "Enter the name pattern (e.g., moha*.*): ";
            cin >> pattern;
            cin.ignore();

            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst(pattern.c_str(), &fileinfo);

void list_file(){
    char x[FILENAME_MAX];
    if (_getcwd(x, sizeof(x))) {
        cout << "Current Directory: " << x << "\n";
    } else {
        cout << "Unable to retrieve the current directory.\n";
    }
    
    int files;
    cout << "        LIST FILE DETAIL \n";
    cout << "---------------------------------\n";
    cout << "1. List All Files and Directories\n";
    cout << "2. List of Extension Files\n";
    cout << "3. List of Name Wise\n";
    cout << " Enter the Number: ";
    cin >> files;
    cin.ignore();

    switch (files) {
        case 1: {
            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst("*.*", &fileinfo);

            if (handle == -1) {
                cout << "No files or directories found in the current directory.\n";
            } else {
                cout << "List of All Files and Directories:\n";
                do {
                    cout << fileinfo.name << (fileinfo.attrib & _A_SUBDIR ? " (Directory)" : " (File)") << "\n";
                } while (_findnext(handle, &fileinfo) == 0);
                _findclose(handle);
            }
            break;
        }
        case 2: {
            string extension;
            cout << "Enter the file extension (e.g., .txt): ";
            cin >> extension;
            cin.ignore();

            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst(("*" + extension).c_str(), &fileinfo);

            if (handle == -1) {
                cout << "No files found with extension " << extension << ".\n";
            } else {
                cout << "Files with extension " << extension << ":\n";
                do {
                    if (!(fileinfo.attrib & _A_SUBDIR)) {
                        cout << fileinfo.name << "\n";
                    }
                } while (_findnext(handle, &fileinfo) == 0);
                _findclose(handle);
            }
            break;
        }
        case 3: {
            string pattern;
            cout << "Enter the name pattern (e.g., moha*.*): ";
            cin >> pattern;
            cin.ignore();

            struct _finddata_t fileinfo;
            intptr_t handle = _findfirst(pattern.c_str(), &fileinfo);

            if (handle == -1) {
                cout << "No files found matching pattern " << pattern << ".\n";
            } else {
                cout << "Files matching pattern " << pattern << ":\n";
                do {
                    if (!(fileinfo.attrib & _A_SUBDIR)) {
                        cout << fileinfo.name << "\n";
                    }
                } while (_findnext(handle, &fileinfo) == 0);
                _findclose(handle);
            }
            break;
        }
        default:
            cout << "Invalid option.\n";
            break;
    }

    cout << "Press any key to continue...";
    cin.get();
}

void change_dir() {
    int option;
    char currentDir[PATH_MAX];

    while (true) {
        cout << "     Change Directory \n";
        cout << "--------------------------\n";
        cout << "1. Step by Step Backward\n";
        cout << "2. Go to Root Directory\n";
        cout << "3. Forward Directory\n";
        cout << "4. Show Current Directory\n";
        cout << "5. Exit\n";
        cout << "Enter the Number: ";
        cin >> option;
        cin.ignore();

        switch (option) {
            case 1: {
                if (_chdir("..") == 0) {
                    cout << "Moved to the parent directory.\n";
                } else {
                    cout << "Failed to move to the parent directory.\n";
                }
                break;
            }
            case 2: {
                if (_chdir("C:\\") == 0) {
                    cout << "Moved to the root directory.\n";
                } else {
                    cout << "Failed to move to the root directory.\n";
                }
                break;
            }
            case 3: {
                string newDir;
                cout << "Please enter the Directory Name: ";
                getline(cin, newDir);

                if (_chdir(newDir.c_str()) == 0) {
                    cout << "Successfully changed directory to " << newDir << ".\n";
                } else {
                    cout << "Failed to change directory.\n";
                }
                break;
            }
            case 4: {
                if (_getcwd(currentDir, sizeof(currentDir)) != NULL) {
                    cout << "Current Directory: " << currentDir << endl;
                } else {
                    cout << "Failed to retrieve the current directory.\n";
                }
                break;
            }
            case 5:
                return;
            default:
                cout << "Invalid option.\n";
                break;
        }

        cout << "Press any key to continue...";
        cin.get();
    }
}

int main(int argc, char** argv) {
    while(true) {
        int menu;

        cout <<"        MAIN MENU \n" ;
        cout <<"--------------------------\n" ;

        cout <<" 1. To Display List of Files. \n";
        cout <<" 2. To Create New Directory. \n";
        cout <<" 3. To Change the Working Directory. \n";
        cout <<" 4. Exit. \n";
        cout <<"Enter the Number: ";
        cin >> menu;
        cout <<"\n";

        switch (menu) {
        case 1:
            list_file();
            break;
        case 2:
            directory();
           break;
        case 3:
        	change_dir();
           break;
        case 4:
           cout <<"Exiting program...";
           return 0;
        default:
           cout <<"INVALID OPTION\n";
           cout <<"\n";
        }
    }

    return 0;
}
